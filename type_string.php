<?php

$s = "Hello";
var_dump($s);
/*string型では、「何文字入っているか」を数値として一緒に出力してくれます。
今回は5文字（5バイト）でした。*/


//1文字目にアクセス
echo $s[1] , "\n" ;

/*プログラミング言語での順番は、「1からではなく、0からスタートする」ことが多いのです。
PHPも同様に、「0 start」になります。
なので、先頭の文字である「H」を出したい場合は、 $s[0]と書く必要があります。
$s[1]と書くと、二番目の文字である「e」になります。
この「0からカウントする」という考え方は今後も出てくる。*/

//マルチバイトで0文字目にアクセス
$multi_string = "あいうえお" ;
var_dump($multi_string) ;
echo $multi_string[0] , "\n" ;
/*PHPの[0]は、正確には「その文字列の先頭0バイト目」の指定です。
また、マルチバイトは「string(15) "あいうえお"」の出力からわかるとおり、
「1文字あたり3バイトの長さ」を持っています。ですので、
5文字なのに、var_dump()では15バイトと書かれているのです。
そのため、$multi_string[0]は「"あ"を構成する3バイトのうち、
1バイト目の表示」になってしまいます。
文字として不完全な状態ですので、正しく出力されません。*/

//「数字」と「数値」
$num_i = 123 ;  //数値
$num_s = "123" ;  //数字
var_dump($num_i);
var_dump($num_s);
/*$num_i に代入したのは「数値」です。
数値なので、「右辺（＝の右側）の値にはダブルクォートがない」
「var_dump()の結果はint」という結果になります。
一方、 $num_s に代入したのは「数字」です。
数字なので、「右辺（＝の右側）の値にはダブルクォートがある」
「var_dump()の結果はstring」という結果になります。
このような違いが出ます。*/

// シングルクォートとダブルクォートの違い
$double_s = "num is {$num_i} \n" ;
//ダブルクォート中の\nなどを解釈してくれる。{}「波括弧」で囲まれた変数などを解釈して「中身の展開」をしてくれる。
$single_s = 'num is {$num_i} \n' ;
var_dump($double_s) ;
var_dump($single_s) ;